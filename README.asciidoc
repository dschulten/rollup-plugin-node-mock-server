= Rollup Plugin Node Mock Server
:toc:

image:https://travis-ci.org/dschulten/rollup-plugin-node-mock-server.svg?branch=master["Build Status", link="https://travis-ci.org/dschulten/rollup-plugin-node-mock-server"]

Rollup plugin to start the https://github.com/smollweide/node-mock-server[node-mock-server] in a rollup project.

The node-mock-server serves both the static resources of your project and features a file-based api mock. The mock can use plain files as responses, but it can also generate templated responses which take parameters and can evaluate custom functions to build the output. A middleware hook allows to define even more dynamic responses.

The server comes with a UI where developers can conveniently edit resources and choose which success or error response the API should return at runtime.

You can also import your mock api from a https://swagger.io/specification/[Swagger (OpenAPI)] specification.


== Installation
    npm i -D rollup-plugin-node-mock-server

== Usage
The _test_  folder contains a sample mock definition.

Create a _mock_ folder in your project and copy the contents of the _test/mock_ folder into it. The file https://github.com/dschulten/rollup-plugin-node-mock-server/blob/master/test/mock/index.js[_test/mock/index.js_] contains a sample definition for your mock server. For an explanation of the options see https://github.com/smollweide/node-mock-server/blob/master/doc/readme-options.md[node-mock-server options]. Furthermore consider the comprehensive documentation in the https://github.com/smollweide/node-mock-server[node-mock-server readme].

Basic configuration of the plugin:

.rollup.config.js
[source,javascript]
----
import nodeMockServer from 'rollup-plugin-node-mock-server'

export default {
    entry: 'index.js',
    dest: './dist/bundle.js',
    format: 'iife',
    plugins: [
        nodeMockServer(),
    ]
}
----

Combine with https://github.com/thgh/rollup-plugin-livereload[rollup-plugin-livereload]:

[source,javascript]
----
import livereload from 'rollup-plugin-livereload'
import nodeMockServer from 'rollup-plugin-node-mock-server'

export default {
    entry: 'index.js',
    dest: './dist/bundle.js',
    format: 'iife',
  plugins: [
    nodeMockServer(),
    livereload()
  ]
}
----
When you execute your rollup pipeline with the node-mock-server definition above, the server will start serving at _/_ from the _/public_ and _/dist_ folder and it automatically opens the browser with _public/index.html_ and the API mock UI.

TIP: All of these paths can be reconfigured in _mock/index.js_, see the https://github.com/smollweide/node-mock-server/blob/master/doc/readme-options.md[options] `uiPath` and `expressMiddleware`.

== Options
Below you see the available plugin options and their default values. They only affect the behaviour of the rollup-plugin, not the mock behaviour.

[source,javascript]
----
nodeMockServer({
    // project folder containing the mock data
    dirName: 'mock',

    // launch index.html page in browser and open mockserver ui
    shouldOpenOnStart: true,

    // specifies the url of the application page to open automatically
    // e.g. to pass query parameters to an SPA
    // as in 'http://localhost:3001/?foo' (note the trailing slash before ?foo)
    url: 'http://localhost:3001/'}
});
----
Use the _index.js_ file inside your _mock_ folder to configure the actual https://github.com/smollweide/node-mock-server/blob/master/doc/readme-options.md[node-mock-server options].

=== Useful Scripts
You can use the option `shouldOpenOnStart` to define an alternative rollup pipeline which does not open additional browser tabs when restarting the pipeline.

.package.json
[source, javascript]
----
  "scripts": {
    "start": "rollup -c -w --environment BUILD:development",
    "again": "rollup -c -w --environment BUILD:again"
  }
----

.rollup.config.js
[source, javascript]
----
const plugins = [];
if (process.env.BUILD === 'development') {
  plugins.push(
    nodeMockServer()
  );
}
if (process.env.BUILD === 'again') {
  plugins.push(
    nodeMockServer({shouldOpenOnStart: false})
  );
}
export default {
  ...
  plugins: plugins,
  ...
}
----

Start pipeline and open browser tabs:

    $ npm start

After stopping the rollup watch pipeline:

    $ npm run again

== Building the Project
    $ npm run build

== Testing the Project
Change into the _test_ directory. Then:

    $ npm install
    $ npm start

== Debugging rollup-plugin-node-mock-server
When you start hacking on the plugin, you may want to debug it. From working directory _/test_ run _node_modules/rollup/bin/rollup_ with application parameter `-c` in your IDE and set breakpoints in _test/node_modules/rollup-plugin-node-mock-server/dist/index.cjs.js_.

== License
The MIT License (MIT). Please see link:LICENSE[License File] for more information.
