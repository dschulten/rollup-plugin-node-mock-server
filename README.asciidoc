= Rollup Plugin Node Mock Server
:toc:

image:https://travis-ci.org/dschulten/rollup-plugin-node-mock-server.svg?branch=master["Build Status", link="https://travis-ci.org/dschulten/rollup-plugin-node-mock-server"]

Rollup plugin to start the https://github.com/smollweide/node-mock-server[node-mock-server] in a rollup project.

The node-mock-server serves both the static resources of your project and features a file-based api mock. The mock can use plain files as responses, but it can also generate templated responses which take parameters and can evaluate custom functions to build the output. A middleware hook allows to define even more dynamic responses.

The server comes with a UI where developers can conveniently edit resources and choose which success or error response the API should return at runtime.

You can also import your mock api from a https://swagger.io/specification/[Swagger (OpenAPI)] specification.


== Installation
    npm i -D rollup-plugin-node-mock-server

== Usage
Basic configuration of the plugin:

.rollup.config.js
[source,javascript]
----
import nodeMockServer from 'rollup-plugin-node-mock-server'

export default {
    entry: 'index.js',
    dest: './dist/bundle.js',
    format: 'iife',
    plugins: [
        nodeMockServer(),
    ]
}
----

Combine with https://github.com/thgh/rollup-plugin-livereload[rollup-plugin-livereload]:

[source,javascript]
----
import livereload from 'rollup-plugin-livereload'
import nodeMockServer from 'rollup-plugin-node-mock-server'

export default {
    entry: 'index.js',
    dest: './dist/bundle.js',
    format: 'iife',
  plugins: [
    nodeMockServer(),
    livereload({watch: 'dist'})
  ]
}
----
TIP: In my experience rollup-plugin-livereload is more robust when it is told which folder to observe.

When you execute your rollup pipeline with the node-mock-server definition above, the server will start serving at _/_ from the _/public_ and _/dist_ folder and it automatically opens the browser with _public/index.html_ and the API mock UI where you can start defining your mock responses.

== Options
=== url
If present, the plugin opens the browser at the given url and adjusts the node-mock-server to use the given `port` accordingly. Default: _http://localhost:3001/_

=== shouldOpenOnStart
If `false`, the plugin will not open browser tabs. Default: `true`

=== contentBase
Array of folders with static content in the project directory that should be served. Default: `['public', 'dist']`.

NOTE: The plugin applies the `contentBase` value to the node-mock-server https://github.com/smollweide/node-mock-server/blob/master/doc/readme-options.md#optionsexpressmiddleware[expressMiddleware] option for convenience. You can specify `expressMiddleware` directly, if needed.

=== dirName
Folder which contains the mock responses. Default: _./mock_

=== Options of node-mock-server
In addition, you can use all https://github.com/smollweide/node-mock-server/blob/master/doc/readme-options.md[node-mock-server options].

=== Example Configuration

[source,javascript]
----
nodeMockServer({

    // specifies the url of the application page to open automatically
    // e.g. to pass query parameters to an SPA
    // as in 'http://localhost:3001/?foo' (note the trailing slash before ?foo)
    url: 'http://localhost:3004/?foo=42'}
});
----
Use the _index.js_ file inside your _mock_ folder to configure the actual https://github.com/smollweide/node-mock-server/blob/master/doc/readme-options.md[node-mock-server options].

== Useful Scripts
You can use the option `shouldOpenOnStart` to define an alternative rollup pipeline which does not open additional browser tabs when restarting the pipeline.

.package.json
[source, javascript]
----
  "scripts": {
    "start": "rollup -c -w",
    "again": "rollup -c -w --environment BUILD:again"
  }
----

.rollup.config.js
[source, javascript]
----
const plugins = [];
const open = (process.env.BUILD !== 'again');

plugins.push(
  nodeMockServer({
    url: 'http://localhost:3004/?foo=42',
    shouldOpenOnStart: open,
  }),
  livereload({watch: 'dist'})
);
export default {
  ...
  plugins: plugins,
  ...
}
----
=== Test Project

The _./test_ folder contains a sample project which demonstrates the above configuration. Change into that directory. Then:

Start pipeline and open browser tabs:

    $ npm start

After stopping the rollup watch pipeline:

    $ npm run again

No new browser tabs will be fired up.

== Building the Project
    $ npm run build

== Testing the Project
Change into the _test_ directory. Then:

    $ npm install
    $ npm start

== Debugging rollup-plugin-node-mock-server
When you start hacking on the plugin, you may want to debug it. From working directory _/test_ run _node_modules/rollup/bin/rollup_ with application parameter `-c` in your IDE and set breakpoints in _src/index.js_.

== License
The MIT License (MIT). Please see link:LICENSE[License File] for more information.
